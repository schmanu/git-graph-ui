{"version":3,"sources":["components/DynamicGitgraph.tsx","styles/Styles.tsx","App.tsx","index.tsx"],"names":["DialogMode","useStyles","makeStyles","theme","createStyles","root","flexGrow","paper","padding","spacing","color","palette","text","secondary","title","small","childSize","DynamicGitgraph","props","render","gitGraphTemplate","templateExtend","TemplateName","Metro","colors","branch","label","display","Grid","item","xs","noValidate","autoComplete","style","state","dialogMode","CreateCommit","TextField","id","select","helperText","onChange","handleBranchNameChange","value","branchName","branches","map","MenuItem","name","IconButton","onClick","event","setState","CreateBranch","multiline","rows","rowsMax","handleCommitMessageChange","paddingTop","Button","variant","addCommit","addBranch","container","selectedBranchName","Alert","severity","onClose","minHeight","options","template","mode","Mode","Compact","gitgraph","masterBranch","commit","subject","handleCommitClick","commitMessage","bind","this","target","console","log","firstParent","newBranches","merge","find","commitOptions","selectedBranch","React","Component","App","classes","rel","href","className","AppBar","position","Toolbar","Typography","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f996895.chunk.js","sourcesContent":["import { Branch, Gitgraph, Mode, templateExtend, TemplateName } from \"@gitgraph/react\";\r\nimport { Button, Grid, IconButton, InputBase, MenuItem, Paper, TextareaAutosize, TextField } from \"@material-ui/core\";\r\nimport React, { ReactSVGElement } from \"react\";\r\nimport Add from \"@material-ui/icons/Add\";\r\nimport { isMaster } from \"cluster\";\r\nimport { Clear, Info } from \"@material-ui/icons\";\r\nimport { Alert } from \"@material-ui/lab\";\r\n\r\n\r\nexport enum DialogMode {\r\n    CreateCommit,\r\n    CreateBranch,\r\n}\r\n\r\nexport class DynamicGitgraph extends React.Component<any, any> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            branches: [],\r\n            dialogMode: DialogMode.CreateCommit,\r\n            selectedBranchName : null,\r\n            commitMessage : null,\r\n        }\r\n\r\n        this.handleBranchNameChange = this.handleBranchNameChange.bind(this);\r\n        this.handleCommitMessageChange = this.handleCommitMessageChange.bind(this);\r\n        this.addBranch = this.addBranch.bind(this);\r\n        this.addCommit = this.addCommit.bind(this);\r\n        this.handleCommitClick = this.handleCommitClick.bind(this);\r\n    }\r\n\r\n    private handleBranchNameChange(event: any) {\r\n        this.setState({ branchName: event.target.value });\r\n    }\r\n    private handleCommitMessageChange(event: any) {\r\n        this.setState({ commitMessage: event.target.value });\r\n    }\r\n\r\n    private handleCommitClick(commit: any) {\r\n        console.log(commit);\r\n        const firstParent: string = commit.branches[0];\r\n\r\n        if (this.state.selectedBranchName === null) {\r\n            this.setState({ selectedBranchName: firstParent });\r\n        } else {\r\n            if (this.state.selectedBranchName === firstParent) {\r\n                this.setState({ selectedBranchName: null });\r\n            } else {\r\n                const newBranches: Branch[] = this.state.branches.map((branch: Branch) => {\r\n                    if (branch.name === firstParent) {\r\n                        branch.merge({\r\n                            branch: this.state.branches.find((branch : Branch) => branch.name === this.state.selectedBranchName),\r\n                            commitOptions: {\r\n                                subject: \"Merge \" + this.state.selectedBranchName + \" into \" + branch.name,\r\n                                onClick: this.handleCommitClick,\r\n                            },\r\n                        });\r\n                    }\r\n                    return branch;\r\n                });\r\n                this.setState({ selectedBranchName: null, branches : newBranches });\r\n            }\r\n        }\r\n    }\r\n\r\n    private addBranch(event: any) {\r\n        if (this.state.branchName !== null) {\r\n            if (this.state.selectedBranchName === null) {\r\n                const newBranches = [...this.state.branches, this.state.gitgraph.branch(this.state.branchName)];\r\n                this.setState({\r\n                    branches: newBranches,\r\n                    branchName: newBranches[0].name,\r\n                    dialogMode: DialogMode.CreateCommit\r\n                });\r\n            } else {\r\n                const selectedBranch : Branch | undefined = this.state.branches.find((branch : Branch) => branch.name === this.state.selectedBranchName);\r\n                const newBranches = [...this.state.branches, selectedBranch?.branch(this.state.branchName)];\r\n                this.setState({\r\n                    branches: newBranches,\r\n                    branchName: newBranches[0].name,\r\n                    dialogMode: DialogMode.CreateCommit\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private addCommit(event: any) {\r\n        if (this.state.commitMessage !== null) {\r\n            const newBranches: Branch[] = this.state.branches.map((branch: Branch) => {\r\n                if (branch.name === this.state.branchName) {\r\n                    branch.commit({\r\n                        subject: this.state.commitMessage,\r\n                        onClick: this.handleCommitClick,\r\n                    }\r\n                    )\r\n                }\r\n                return branch;\r\n            });\r\n            this.setState({\r\n                branches: newBranches,\r\n            });\r\n        }\r\n    }\r\n\r\n    public render = () => {\r\n        const gitGraphTemplate = templateExtend(TemplateName.Metro, {\r\n            colors: [\"#F94144\", \"#F3722C\", \"#F8961E\", \"#F9844A\", \"#F9C74F\", \"#90BE6D\", \"#43AA8B\", \"#4D908E\", \"#577590\", \"#277DA1\"],\r\n            branch: {\r\n              label: {\r\n                display: false,\r\n              },\r\n            }\r\n        });\r\n\r\n        return (\r\n\r\n            <><Grid item xs={5}>\r\n                <form noValidate autoComplete=\"off\" style={{ padding: 10, }}>\r\n                    {this.state.dialogMode === DialogMode.CreateCommit ? (\r\n                        <div>\r\n                            <TextField\r\n                                id=\"branchName\"\r\n                                select\r\n                                label=\"Branch\"\r\n                                helperText=\"Please select a branch to commit to\"\r\n                                onChange={this.handleBranchNameChange}\r\n                                value={this.state.branchName}>\r\n                                {this.state.branches\r\n                                    .map((branch: Branch) => (\r\n                                        <MenuItem key={branch.name} value={branch.name}>\r\n                                            {branch.name}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                            </TextField>\r\n                            <IconButton onClick={((event) => {\r\n                                this.setState({ dialogMode: DialogMode.CreateBranch, value: null })\r\n                            })}>\r\n                                <Add />\r\n                            </IconButton>\r\n                        </div>\r\n                    ) : (<div />)}\r\n                    {this.state.dialogMode === DialogMode.CreateCommit ? (\r\n                        <div>\r\n                            <div>\r\n                                <TextField id=\"commitMessage\" label=\"Commit Message\" multiline rows={3} rowsMax={10} onChange={this.handleCommitMessageChange} />\r\n                            </div>\r\n\r\n                            <div style={{ paddingTop: 10, }}>\r\n                                <Button variant=\"contained\" color=\"secondary\" onClick={this.addCommit}>\r\n                                    Create Commit\r\n                            </Button>\r\n                            </div>\r\n                        </div>\r\n                    ) : (\r\n                            <div>\r\n                                <div>\r\n                                    <TextField id=\"branchName\" label=\"Branch Name\" onChange={this.handleBranchNameChange} />\r\n                                </div>\r\n                                <div style={{ paddingTop: 10, }}>\r\n                                    <Button variant=\"contained\" color=\"secondary\" onClick={this.addBranch} >\r\n                                        Create Branch\r\n                            </Button>\r\n                                    <Button variant=\"contained\" color=\"default\" onClick={((event) => {\r\n                                        this.setState({ dialogMode: DialogMode.CreateCommit, value: null })\r\n                                    })}>\r\n                                        Cancel\r\n                            </Button>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                </form>\r\n            </Grid>\r\n            <Grid container xs={7}>\r\n                <Grid item xs={7}>\r\n                    {this.state.selectedBranchName? (\r\n                        <Alert severity=\"success\" onClose={(event) => this.setState({selectedBranchName : null})}>Merging branch <strong>{this.state.selectedBranchName}</strong>. Select branch to merge it in.</Alert>\r\n                    ) : (\r\n                        <Alert severity=\"info\">To Merge, please click on a branch.</Alert>\r\n                    )}\r\n                </Grid>\r\n                <Grid item xs={12} style={{padding: 20, minHeight: 200}}>\r\n                    <Gitgraph options={{\r\n                        template : gitGraphTemplate,\r\n                        mode: Mode.Compact,\r\n                    }}>\r\n                        {(gitgraph) => {\r\n                            const masterBranch = gitgraph.branch(\"master\");\r\n                            masterBranch.commit({\r\n                                subject: \"Initial Commit\",\r\n                                onClick: this.handleCommitClick,\r\n                            });\r\n                            this.setState({ gitgraph, branches: [masterBranch], branchName: \"master\" });\r\n                        }\r\n                        }\r\n                    </Gitgraph>\r\n                </Grid>\r\n                </Grid></>\r\n        );\r\n    }\r\n}","import { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\r\n\r\nexport const useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        paper: {\r\n            padding: theme.spacing(2),\r\n            color: theme.palette.text.secondary,\r\n        },\r\n        title: {\r\n            flexGrow: 1,\r\n          },\r\n        small: {\r\n            color: '#000',\r\n            padding: 8,\r\n            childSize: 24,\r\n        }\r\n    }),\r\n);","import './App.css';\nimport React from 'react';\nimport { Gitgraph, Mode } from '@gitgraph/react';\nimport { useStyles } from './styles/Styles';\nimport { AppBar, Grid, IconButton, Paper, Toolbar, Typography } from '@material-ui/core';\nimport { DynamicGitgraph } from './components/DynamicGitgraph';\n\n\n\nfunction App() {\n\n  const classes = useStyles();\n\n\n  return (\n    <div>\n        <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\" />\n        <div className={classes.root}>\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              <AppBar position=\"static\">\n                <Toolbar>\n                  <Typography variant=\"h6\" className={classes.title}>\n                    GitGraph Viz Tool\n                  </Typography>\n                </Toolbar>\n              </AppBar>\n            </Grid>\n            <DynamicGitgraph classes={classes} />\n          </Grid>\n\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}